// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StonkRocket.API.Services;

#nullable disable

namespace StonkRocket.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("StockStockDashboard", b =>
                {
                    b.Property<int>("StockDashboardsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StocksId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StockDashboardsId", "StocksId");

                    b.HasIndex("StocksId");

                    b.ToTable("StockStockDashboard");
                });

            modelBuilder.Entity("StonkRocket.API.Models.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Close")
                        .HasColumnType("REAL");

                    b.Property<double>("High")
                        .HasColumnType("REAL");

                    b.Property<double>("Low")
                        .HasColumnType("REAL");

                    b.Property<double>("Open")
                        .HasColumnType("REAL");

                    b.Property<string>("Ticker")
                        .HasColumnType("TEXT");

                    b.Property<int>("Transactions")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Volume")
                        .HasColumnType("REAL");

                    b.Property<double>("VolumeWeightedAveragePrice")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("StonkRocket.API.Models.StockDashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("StockDashboards");
                });

            modelBuilder.Entity("StonkRocket.API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StockDashboardId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StockDashboardId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StockStockDashboard", b =>
                {
                    b.HasOne("StonkRocket.API.Models.StockDashboard", null)
                        .WithMany()
                        .HasForeignKey("StockDashboardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StonkRocket.API.Models.Stock", null)
                        .WithMany()
                        .HasForeignKey("StocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StonkRocket.API.Models.User", b =>
                {
                    b.HasOne("StonkRocket.API.Models.StockDashboard", "StockDashboard")
                        .WithOne("User")
                        .HasForeignKey("StonkRocket.API.Models.User", "StockDashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockDashboard");
                });

            modelBuilder.Entity("StonkRocket.API.Models.StockDashboard", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
